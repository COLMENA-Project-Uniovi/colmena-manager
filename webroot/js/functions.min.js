(function ($) {
    $.fn.sideMenu = function (options) {
        let nav = this;
        const settings = $.extend(
            {
                urlPost: ADMIN_PATH + "users/hide-menu",
                mainContentSelector: "#main-content",
            },
            options
        );
        initialize();
        function initialize() {
            nav.find("nav .close").click(() => {
                AjaxStorage.register("menu");
                $.post(settings.urlPost)
                    .done((data, status, response) => {
                        nav.find("nav:not(.small)").addClass("closed");
                        $(settings.mainContentSelector).addClass("wide");
                    })
                    .fail((response, status, error) => {
                        Notification.show(
                            response.responseJSON.status,
                            response.responseJSON.message
                        );
                    })
                    .always((response, status, error) => {
                        AjaxStorage.unregister("menu");
                    });
            });
            nav.find("nav .accordion .header").click(function () {
                $(this).parents(".accordion").toggleClass("is_active");
            });
            nav.find("nav.small .open").click(() => {
                AjaxStorage.register("menu");
                $.post(settings.urlPost)
                    .done((data, status, response) => {
                        nav.find("nav:not(.small)").removeClass("closed");
                        $(settings.mainContentSelector).removeClass("wide");
                    })
                    .fail((response, status, error) => {
                        Notification.show(
                            response.responseJSON.status,
                            response.responseJSON.message
                        );
                    })
                    .always((response, status, error) => {
                        AjaxStorage.unregister("menu");
                    });
            });
            nav.find("nav.small .menu-icon").hover(
                function () {
                    let icon = $(this);
                    let submenu = icon.find(".sub-menu");
                    let top = icon.offset().top - $(window).scrollTop();
                    let left = icon.width();
                    if (top + submenu.height() > $(window).height()) {
                        top = top - submenu.height() + icon.height();
                    }
                    submenu.css(
                        "transform",
                        "translate3d(" + left + "px, " + top + "px, 0)"
                    );
                    submenu.addClass("show");
                },
                function () {
                    let icon = $(this);
                    let submenu = icon.find(".sub-menu");
                    $(this).find(".sub-menu").removeClass("show");
                    submenu.css("transform", "");
                    submenu.removeClass("show");
                }
            );
        }
    };
    $(document).ready(() => {
        $(".nav").sideMenu();
    });
})(jQuery);
(function ($) {
    $.fn.dropdown = function () {
        this.each(function () {
            let dropdown = $(this);
            dropdown.find(".button").unbind("click");
            dropdown.find(".button").click(function () {
                dropdown.toggleClass("is_active");
            });
        });
    };
    $(document).ready(() => {
        $(".dropdown").dropdown();
    });
})(jQuery);
(function ($) {
    $.fn.dateChecker = function () {
        this.each(function () {
            let start_date = $(this).find(".start_date");
            let end_date = $(this).find(".end_date");
            if (start_date.length > 0 && end_date.length > 0) {
                start_date.change(() => {
                    end_date.attr("min", start_date.val());
                });
                end_date.change(() => {
                    start_date.attr("max", end_date.val());
                });
            }
        });
    };
    $(document).ready(() => {
        $(".date-checker").dateChecker();
    });
})(jQuery);
(function ($) {
    $.fn.checkbox = function () {
        this.unbind("click");
        this.click(function () {
            let checkbox = $(this);
            AjaxStorage.register("boolean");
            const id = checkbox.data("id");
            const controller = checkbox.data("controller");
            const field = checkbox.data("field");
            const lang =
                typeof checkbox.data("lang") != "undefined"
                    ? checkbox.data("lang")
                    : !1;
            const plugin =
                typeof checkbox.data("plugin") != "undefined"
                    ? checkbox.data("plugin")
                    : !1;
            let url_post = controller + "/change-boolean/" + id + "/" + field;
            if (plugin !== !1) {
                url_post = plugin + "/" + url_post;
            }
            if (lang !== !1) {
                url_post += "/" + lang;
            }
            url_post = ADMIN_PATH + url_post;
            $.post(url_post)
                .done(function (data, status, response) {
                    checkbox.toggleClass("checked");
                })
                .fail(function (response, status, error) {
                    Notification.show(
                        response.responseJSON.status,
                        response.responseJSON.message
                    );
                })
                .always(function (response, status, error) {
                    AjaxStorage.unregister("boolean");
                });
        });
    };
    $(document).ready(() => {
        $(".boolean .check").checkbox();
    });
})(jQuery);
(function ($) {
    $.fn.tabs = function () {
        this.each(function () {
            let tabs_header = $(this).find(".tabs-header");
            let tabs_content = $(this).find(".tabs-content");
            let first_tab = tabs_header.find(".tab:first");
            first_tab.addClass("current");
            let first_content = tabs_content.find(
                ".tab[data-tab=" + first_tab.data().tab + "]"
            );
            first_content.addClass("current");
            tabs_header.find(".tab").unbind("click");
            tabs_header.find(".tab").click(function () {
                let current_tab = tabs_header.find(".tab.current");
                let current_content = tabs_content.find(
                    ".tab[data-tab=" + current_tab.data().tab + "]"
                );
                let next_tab = $(this);
                if (next_tab.hasClass("current")) {
                    return;
                }
                let next_content = tabs_content.find(
                    ".tab[data-tab=" + next_tab.data().tab + "]"
                );
                current_tab.removeClass("current");
                current_content.removeClass("current");
                next_tab.addClass("current");
                next_content.addClass("current");
            });
        });
    };
    $(document).ready(() => {
        $(".tabs").tabs();
    });
})(jQuery);
(function ($) {
    $.fn.addressFinder = function () {
        this.each(function () {
            let address = $(this);
            address
                .find(".map-canvas")
                .mapsLoader({
                    latitude: address.find(".latitude").val(),
                    longitude: address.find(".longitude").val(),
                    draggableMarker: !0,
                    zoom: 15,
                });
            address.find(".address-search").unbind("click");
            address.find(".address-search").click(function () {
                let addr = address.find(".addr").val();
                let city = address.find(".city").val();
                let region = address.find(".region").val();
                let country = address.find(".country").val();
                let full_address = addr != "" ? addr : "";
                full_address += city != "" ? ", " + city : "";
                full_address += region != "" ? ", " + region : "";
                full_address += country != "" ? ", " + country : "";
                if (addr == "" || addr == "undefined") {
                    address.find(".map-canvas").mapsLoader({});
                } else {
                    address
                        .find(".map-canvas")
                        .mapsLoader({
                            address: full_address,
                            draggableMarker: !0,
                            zoom: 15,
                        });
                }
            });
        });
    };
    $(document).ready(() => {
        $(".address").addressFinder();
    });
})(jQuery);
(function ($) {
    $.fn.draggable = function () {
        this.each(function () {
            let draggable = $(this);
            draggable.find(".elements").sortable({
                containment: draggable,
                axis: "y",
                placeholder: "ui-placeholder",
                update: function (event, ui) {
                    let sortable = $(this);
                    let sort_events = [];
                    let start_index = 1;
                    if (typeof sortable.data("sort-start") != "undefined") {
                        start_index = parseInt(sortable.data("sort-start"));
                    }
                    AjaxStorage.register("change_sort");
                    sortable.children().each(function () {
                        let row = $(this);
                        const controller = row.data("controller");
                        const id = row.data("id");
                        const sort_element = row.data("sort-element");
                        const sort_field = row.data("sort-field");
                        const index = start_index + row.index();
                        const old_index = row
                            .find("." + sort_element)
                            .html()
                            .trim();
                        if (index != old_index) {
                            let url_post =
                                controller + "/change-sort/" + id + "/" + index;
                            if (typeof sort_field !== "undefined") {
                                url_post += "/" + sort_field;
                            }
                            if (row.data().plugin) {
                                url_post =
                                    ADMIN_PATH +
                                    row.data().plugin +
                                    "/" +
                                    url_post;
                            } else {
                                url_post = ADMIN_PATH + url_post;
                            }
                            let sort_event = $.post(url_post).done(function (
                                data,
                                status,
                                response
                            ) {
                                row.find("." + sort_element).html(index);
                            });
                            sort_events.push(sort_event);
                        }
                    });
                    $.when(...sort_events)
                        .fail(function (response, status, error) {
                            Notification.show(
                                response.responseJSON.status,
                                response.responseJSON.message
                            );
                        })
                        .always(function (response, status, error) {
                            AjaxStorage.unregister("change_sort");
                        });
                },
            });
        });
    };
    $(document).ready(() => {
        $(".draggable").draggable();
    });
})(jQuery);
(function ($) {
    $.fn.codeEditor = function (mode) {
        let editor = this;
        mode = mode != "undefined" && mode != "" ? mode : "text/html";
        CodeMirror.fromTextArea(editor[0], {
            mode: mode,
            extraKeys: { "Ctrl-Space": "autocomplete" },
            styleis_activeLine: !0,
            indentUnit: 4,
            lineNumbers: !0,
            lineWrapping: !0,
            showTrailingSpace: !0,
            matchTags: { bothTags: !0 },
            autoCloseTags: !0,
            gutters: ["CodeMirror-lint-markers"],
            lint: !0,
            autoRefresh: !0,
        });
    };
    $(document).ready(() => {
        $(".codeeditor").each(function () {
            $(this).codeEditor($(this).data("mode"));
        });
    });
})(jQuery);
(function ($) {
    $.fn.collapsable = function () {
        this.each(function () {
            let collapsable = $(this);
            let collapse_header = collapsable.find(".collapse-header");
            if (collapsable.hasClass("is_active")) {
                collapsable.children(".collapse").css("overflow", "visible");
            }
            let timeout = !1;
            collapse_header.unbind("click");
            collapse_header.click(function () {
                collapsable.toggleClass("is_active");
                if (collapsable.hasClass("is_active")) {
                    timeout = setTimeout(() => {
                        collapsable
                            .children(".collapse")
                            .css("overflow", "visible");
                    }, 200);
                } else {
                    clearTimeout(timeout);
                    collapsable.children(".collapse").css("overflow", "hidden");
                }
            });
        });
    };
    $(document).ready(() => {
        $(".collapsable").collapsable();
    });
})(jQuery);
(function ($) {
    $.fn.form = function (options) {
        let form = this;
        const settings = $.extend({ colors: COLORS }, options);
        initialize();
        function initialize() {
            initCollapsable();
            initSelect();
            initInputs();
            initAdvancedEditor();
        }
        function initCollapsable() {
            $(".collapsable").collapsable();
        }
        function initSelect() {
            form.find("select").select2({ width: "100%" });
            let color_template = (element) => {
                if (typeof settings.colors[element.id] == "undefined") {
                    return $(
                        '<span class="color-text">' + element.text + "</span>"
                    );
                }
                return $(
                    '<span class="color-block" style="background-color: ' +
                        settings.colors[element.id] +
                        '"></span><span class="color-text">' +
                        element.text +
                        "</span>"
                );
            };
            form.find("select.color").select2({
                templateResult: color_template,
                templateSelection: color_template,
            });
        }
        function initInputs() {
            form.find(".input").each(function () {
                let help = $(this).find(".help");
                if (help.find(".info").length > 0) {
                    if (help.find(".info > div").html().trim() == "") {
                        help.remove();
                    }
                }
                let max = $(this).find(".max");
                let max_number = parseInt(max.data("max"));
                if (!isNaN(max_number)) {
                    let input = $(this).find("input, textarea");
                    updateLetterCount(input, max);
                    input.keyup(function () {
                        updateLetterCount(input, max);
                    });
                }
            });
            function updateLetterCount(element, max) {
                let max_number = parseInt(max.data().max);
                let strlength = element.val().length;
                let nleft = max_number - strlength;
                let max_class = "green";
                if (nleft <= 10 && nleft > 0) {
                    max_class = "yellow";
                } else if (nleft <= 0) {
                    max_class = "red";
                }
                max.removeClass().addClass("max").addClass(max_class);
                max.html(nleft);
            }
        }
        function changeEditorBackground() {
            for (let i = 0; i < tinymce.editors.length; i++) {
                tinymce.get(i).contentDocument.body.style.backgroundColor =
                    COLORS[$("#bg-color").val()];
            }
        }
        function initAdvancedEditor() {
            tinymce.remove();
            $(document).ready(function () {
                initStandardEditor();
                initHeaderEditor();
                setTimeout(changeEditorBackground, 800);
                $("#bg-color").change(function (e) {
                    changeEditorBackground();
                });
            });
            function initStandardEditor() {
                tinymce.init({
                    selector: ".texteditor",
                    height: 400,
                    oninit: "setPlainText",
                    plugins: "code link autosave image paste template hr",
                    toolbar:
                        "undo redo | cut copy paste | styleselect template | bold italic underline strikethrough | forecolor backcolor | link hr | alignleft aligncenter alignright alignjustify | removeformat code",
                    menubar: !1,
                    convert_urls: !1,
                    style_formats: TYPOGRAPHY.standard,
                    color_map: TEXTCOLOR_MAP,
                    style_formats_merge: !1,
                    style_formats_autohide: !0,
                    force_hex_style_colors: !0,
                    content_css:
                        ADMIN_PATH +
                        "/css/vendors/tinymce/style.css?" +
                        new Date().getTime(),
                    templates:
                        ADMIN_PATH +
                        "/js/vendors/tinymce/templates/standard.php?admin_path=" +
                        ADMIN_PATH,
                });
            }
            function initHeaderEditor() {
                tinymce.init({
                    selector: ".headereditor",
                    height: 400,
                    oninit: "setPlainText",
                    plugins: "code link autosave image paste template hr",
                    toolbar:
                        "undo redo | cut copy paste | bold italic styleselect template | forecolor backcolor | link hr | alignleft aligncenter alignright alignjustify | removeformat code",
                    menubar: !1,
                    convert_urls: !1,
                    style_formats: TYPOGRAPHY.header,
                    color_map: TEXTCOLOR_MAP,
                    style_formats_merge: !1,
                    style_formats_autohide: !0,
                    force_hex_style_colors: !0,
                    content_css:
                        ADMIN_PATH +
                        "/css/vendors/tinymce/style.css?" +
                        new Date().getTime(),
                    templates:
                        ADMIN_PATH +
                        "/js/vendors/tinymce/templates/header.php?admin_path=" +
                        ADMIN_PATH,
                });
            }
        }
    };
    $(document).ready(() => {
        $("form").form();
    });
})(jQuery);
(function () {
    class Configure {
        static storage = [];
        static write(key, value) {
            this.storage[key] = value;
        }
        static read(key) {
            return this.storage[key];
        }
    }
    window.Configure = Configure;
})();
(function ($) {
    class AjaxStorage {
        static storage = [];
        static register(name) {
            this.storage.push(name);
            showPageLoader();
        }
        static unregister(name) {
            for (let i = 0; i < this.storage.length; i++) {
                if (this.storage[i] == name) {
                    this.storage.splice(i, 1);
                    break;
                }
            }
            if (this.storage.length == 0) {
                hidePageLoader();
            }
        }
    }
    function showPageLoader() {
        $("#page-loader").addClass("is_active");
    }
    function hidePageLoader() {
        $("#page-loader").removeClass("is_active");
    }
    window.AjaxStorage = AjaxStorage;
})(jQuery);
(function ($) {
    class Notification {
        static show(status, message) {
            let notification = getNotification();
            if (
                !notification.hasClass("hidden") &&
                !notification.hasClass(status)
            ) {
                notification.addClass("hidden");
            }
            notification.find(".nt-content").html(message);
            notification.attr("class", "notification hidden");
            notification.removeClass("hidden");
            notification.addClass(status);
            this.hide();
        }
        static hide(time) {
            let notification = getNotification();
            time = typeof time != "undefined" ? time : 6000;
            setTimeout(function () {
                notification.addClass("hidden");
            }, time);
        }
    }
    function getNotification() {
        return $(".notification");
    }
    $(document).ready(function () {
        Notification.hide();
    });
    window.Notification = Notification;
})(jQuery);
(function ($) {
    $.fn.privacy = function () {
        this.unbind("click");
        this.click(function () {
            AjaxStorage.register("privacy");
            let lock = $(this);
            let locks = lock.parents(".locks");
            let tr_parent = lock.parents(".tr");
            const actual_data = locks.data("actual");
            const id = locks.data("id");
            const controller = locks.data("controller");
            const plugin =
                typeof locks.data("plugin") != "undefined"
                    ? locks.data("plugin")
                    : !1;
            lock.toggleClass("is_active");
            let new_privacy = "";
            if (locks.find(".lock.is_active").length == 0) {
                lock.addClass("is_active");
                AjaxStorage.unregister("privacy");
                return;
            }
            locks.find(".lock.is_active").each(function () {
                let change = $(this).data("change");
                if (new_privacy == "") {
                    new_privacy = change;
                } else if (new_privacy != "change") {
                    new_privacy = "both";
                }
                if (actual_data == "both") {
                    tr_parent.removeClass("low-opacity");
                } else if (
                    actual_data == new_privacy ||
                    new_privacy == "both"
                ) {
                    tr_parent.removeClass("low-opacity");
                } else if (actual_data != new_privacy) {
                    tr_parent.toggleClass("low-opacity");
                }
            });
            let url_post =
                controller + "/change-privacy/" + id + "/" + new_privacy;
            if (plugin !== !1) {
                url_post = plugin + "/" + url_post;
            }
            url_post = ADMIN_PATH + url_post;
            $.post(url_post)
                .done(function (data, status, response) {
                    lock.toggleClass("checked");
                })
                .fail(function (response, status, error) {
                    Notification.show(
                        response.responseJSON.status,
                        response.responseJSON.message
                    );
                })
                .always(function (response, status, error) {
                    AjaxStorage.unregister("privacy");
                });
        });
    };
    $(document).ready(() => {
        $(".privacy .lock").privacy();
    });
})(jQuery);
